type Void {
  null: Boolean
}

type Query {
  getBooks: [Book]
}

type Mutation {
  createUser(input: createUserInput!): Void!
  login(input: LoginInput!): User!
  logout(input: cookieInput): LogoutResponse
  addEmployee(input: AddEmployeeInput!): Employee!
  deleteEmployee(input: DeleteEmployeeInput!): Employee!
  updateEmployee(input: UpdateEmployeeInput!): Employee!
  follow(input: FollowInput!): User!
  unfollow(input: FollowInput!): User!
}

type Subscription {
  updatedEmployee: Employee
}

type Book {
  title: String
  author: String
}

type User {
  id: ID
  username: String
  following: [String]
}

type LogoutResponse {
  success: Boolean
}

type Employee {
  _id: ID
  name: String
  location_city: String
  location_state: String
  exp: Int
  skills: [Skill]
  salary: Int
  category: String
  subcategory: String
  work_authorization: String
}

type Skill {
  skill: [String]
}

input createUserInput {
  username: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

input cookieInput {
  name: String
}

input AddEmployeeInput {
  name: String
  location_city: String
  location_state: String
  exp: Int
  skills: [String]
  salary: Int
  category: String
  subcategory: String
  work_authorization: String
}

input DeleteEmployeeInput {
  _id: ID
}

input UpdateEmployeeInput {
  _id: ID
  name: String
  location_city: String
  location_state: String
  exp: Int
  skills: [String]
  salary: Int
  category: String
  subcategory: String
  work_authorization: String
}

input FollowInput {
  _id: ID
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}